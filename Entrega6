-- Aluno: Luiz Carlos R. Neduziak

{-Usando List Comprehension escreva uma função, chamada divisoresden, que devolva uma lista dos divisores de um número dado.-}

divisoresden :: Int -> [Int]
divisoresden n = [x | x <- [1..n], mod n x == 0]

{-Usando  List Comprehension  escreva  uma  função,  chamada  contaCaractere,  que  conte  a 
ocorrência de um caractere específico, em uma string dada. 
-}

contaCaracter :: [Char] -> Int
contaCaracter xs = length [x | x <- xs]

{-Usando List Comprehension escreva uma função, chamada dobroNaoNegativo, que devolve 
o dobro dos valores dos elementos não negativos da lista de inteiros dada.-}

dobroNaoNegativo :: [Int] -> [Int]
dobroNaoNegativo xs = [2 * x | x <- xs, x > 0]

{-Usando List Comprehension escreva uma função chamada pitagoras, que devolva uma lista de triplas, não repetidas, contendo os lados dos triângulos retângulos possíveis de serem construídos por inteiros entre 1 e um número inteiro dado.-}
pitagoras :: Int -> [(Int, Int, Int)]
pitagoras n = [(lado_a, lado_b, lado_c) | lado_a <- [1..n], lado_b <- [1..n], lado_c <- [1..n], lado_a ^ 2 == lado_b^2 ^ 2 + lado_c ^ 2]

{-Números perfeitos são aqueles cuja soma dos seus divisores é igual ao próprio número. Usando List Comprehension escreva uma função, chamada numerosPerfeitos, que devolva uma lista contendo todos os números perfeitos menores que um número dado. Lembre-se que você já tem uma função que devolve uma lista dos divisores de um número dado.-}
listaNumerosPerfeitos :: Int -> [Int]
listaNumerosPerfeitos n =  [i | i <- [1..n], sum (init (fatores i)) == i]

fatores :: Int -> [Int]
fatores n = [i | i <- [1..n], n `mod` i == 0]

{-Usando List Comprehension escreva uma função, chamada produtoEscalar, que devolva o produto escalar entre duas listas de inteiros. Lembre-se, existem as funções fst, snd e zip no prelude que podem ser úteis.
-}
produtoEscalar :: [Int] -> [Int] -> Int
produtoEscalar [] [] = 0
produtoEscalar xs ys = sum [x * y | (x,y) <- zip xs ys]

{-Usando List Comprehension escreva uma função, chamada primeirosPrimos, que devolva uma lista contendo os n primeiros números primos a partir do número 2.-}
primeirosPrimos :: Int -> [Int]
primeirosPrimos n = [x | x <- [2..n], mod x 1 == 0 && mod x x == 0]

{-Usando List Comprehension escreva uma função, chamada paresOrdenados, que devolva uma lista de pares ordenados contendo uma potência de 2 e uma potência de 3 até um determinado número dado. Observe que estes números podem ser bem grandes.-}
paresOrdenados :: Int -> [(Int, Int)]
paresOrdenados n = [(2^i,3^j) | i <- [1..n], j <- [1..n]]

main = do

  putStrLn ("\nFunc.1: entrada: 10; resultado: " ++ show(divisoresden 10))
  putStrLn ""
  putStrLn ("\nFunc.2: entrada: Luizera; resultado: " ++ show(contaCaracter "Luizera"))
  putStrLn ""
  putStrLn ("\nFunc.3: entrada: [-1, -3, 0, 1, 4]; resultado: " ++ show(dobroNaoNegativo [-1, -3, 0, 1, 4]))
  putStrLn ""
  putStrLn ("\nFunc.4: entrada: 5; resultado: " ++ show(pitagoras 5))
  putStrLn ""
  putStrLn ("\nFunc.5: entrada: [1, 2, 3, 4, 5, 6]; resultado: " ++ show(listaNumerosPerfeitos 6))
  putStrLn ""
  putStrLn ("\nFunc.6: entrada: 5; resultado: " ++ show(produtoEscalar [1, 2, 3] [5, 6, 7]))
  putStrLn ""
  putStrLn ("\nFunc.7: entrada: 5; resultado: " ++ show(primeirosPrimos 5))
  putStrLn ""
  putStrLn ("\nFunc.8: entrada: 4; resultado: " ++ show(paresOrdenados 5))
