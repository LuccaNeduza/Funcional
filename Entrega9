; Aluno: Luiz Carlos R. Neduziak

; 1. Utilizando a linguagem Clojure, crie uma função chamada ultimo que receba uma lista e devolva o último elemento desta lista sem usar as funções já prontas e disponíveis para esta mesma finalidade na linguagem Clojure.

(defn ultimo [x]
  (let [size (count x)]
    (nth x (- size 1))))

; 2. Utilizando a linguagem Clojure, crie uma função chamada penultimo que receba uma lista e devolva o penúltimo elemento desta lista usar as funções já prontas e disponíveis para esta mesma finalidade na linguagem Clojure.

(defn penultimo [x]
  (let [size (count x)]
    (nth x (- size 2))))

; 3. Utilizando a linguagem Clojure, crie uma função chamada elementoN que receba uma lista e um inteiro N e devolva o elemento que está na posição N desta lista usar as funções já prontas e disponíveis para esta mesma finalidade na linguagem Clojure.

(defn elementoN [x N] 
  (nth x N))

; 4. Utilizando  a  linguagem Clojure,  crie  uma função  chamada  inverso  que  receba uma  lista  e devolva esta lista com as posições dos elementos invertidas. Por exemplo recebe [1,2,3] e devolve [3,2,1]. Sem usar as funções já prontas e disponíveis para esta mesma finalidade na linguagem Clojure.

(defn inverso [lista1 listainv]
    (if (> (count lista1) 0)
       (recur (pop lista1) (conj listainv (last lista1)))           
      listainv))

; 5. Utilizando a  linguagem Clojure, crie uma função chamada  mdc que receba  dois inteiros e devolve o mínimo divisor comum entre eles.  Sem usar as funções já prontas e disponíveis para esta mesma finalidade na linguagem Clojure.  

(defn mdc [int_1 int_2]
  (if (= int_2 0)
    int_1
    (recur int_2 (mod int_1 int_2))))


(println "Func.1 entrada (21 2 9 67); resultado " (ultimo '(21 2 9 67)))
(println "Func.2 entrada (1 2 3 4 5 67); resultado " (penultimo '(1 2 3 4 5 67)))
(println "Func.3 entrada (1 89 13 34) e 2; resultado " (elementoN '(1 89 13 34) 2))
(println "Func 4 entrada [1 2 3 4] []; resultado: " (inverso [1 2 3 4] []))
(println "Func 5 entrada 12 e 3; resultado: " (mdc 12 3))
